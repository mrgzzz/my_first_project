import React, { useState } from 'react';
import {
  WelcomeMessage,
  UserCard,
  Button,
  Card,
  Toggle,
  ConditionalMessage
} from './basic/BasicComponents';
import {
  Counter,
  LoginForm,
  ColorPicker,
  TodoList,
  SearchBox
} from './stateful/StatefulComponents';
import {
  Timer,
  WindowSizeTracker,
  DataFetcher
} from './lifecycle/LifecycleComponents';
import {
  CounterWithHooks,
  UserProfile,
  EffectDemo,
  ThemeToggle,
  ThemeProvider,
  FetchDemo
} from './hooks/HooksComponents';

const ComponentTests = () => {
  const [activeSection, setActiveSection] = useState('basic');
  const [dataFetcherUserId, setDataFetcherUserId] = useState(1);

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testUser = {
    name: '–ê–Ω–∞—Å—Ç–∞—Å–∏—è –Ø–∫–æ–≤–ª–µ–≤–∞',
    email: 'nastya@gmail.com',
    avatar: 'https://avatars.mds.yandex.net/i?id=91106e46cefbd1b10a14f1fe8bf63cc15edaba91-8474988-images-thumbs&n=13',
    isOnline: true
  };

  const testUser2 = {
    name: '–ö–∞–º–æ–ª–∞ –Æ—Å—É–ø–æ–≤–∞',
    email: 'kamola@gmail.com',
    avatar: 'https://avatars.mds.yandex.net/i?id=d653281638a1be4acbfc4469132b6b7fe007f447-8492261-images-thumbs&n=13',
    isOnline: false
  };

  const renderBasicComponents = () => (
    <div className="test-section">
      <h2>üß© –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
      
      <Card title="üëã WelcomeMessage - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ">
        <WelcomeMessage name="–ê–Ω–∞—Å—Ç–∞—Å–∏—è" age={19} />
        <WelcomeMessage name="–ö–∞–º–æ–ª–∞" age={17} />
      </Card>

      <Card title="üë§ UserCard - –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
        <UserCard user={testUser} />
        <UserCard user={testUser2} />
      </Card>

      <Card title="üîÑ Button - –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π">
        <Button variant="primary" size="large" onClick={() => alert('–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞!')}>
          üî• –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        </Button>
        <Button variant="secondary" size="medium" onClick={() => alert('–í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞!')}>
          ‚ö° –í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        </Button>
        <Button size="small" onClick={() => alert('–ú–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞!')}>
          üìå –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–Ω–æ–ø–∫–∞
        </Button>
      </Card>

      <Card title="üé≠ Toggle - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç">
        <Toggle>
          <div style={{padding: '15px', background: '#f8f9fa', borderRadius: '8px'}}>
            <h4>–°–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! üéâ</h4>
            <p>–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏.</p>
            <UserCard user={testUser} />
          </div>
        </Toggle>
      </Card>

      <Card title="üì¢ ConditionalMessage - —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É">
        <ConditionalMessage status="success" message="–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ" />
        <ConditionalMessage status="error" message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏! ‚ùå" />
        <ConditionalMessage status="warning" message="–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! ‚ö†Ô∏è" />
        <ConditionalMessage status="info" message="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ÑπÔ∏è" />
      </Card>
    </div>
  );

  const renderStatefulComponents = () => (
    <div className="test-section">
      <h2>üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º</h2>
      
      <Card title="üî¢ Counter - —Å—á—ë—Ç—á–∏–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏">
        <Counter />
      </Card>

      <Card title="üîê LoginForm - —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π">
        <LoginForm />
      </Card>

      <Card title="üé® ColorPicker - –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞">
        <ColorPicker />
      </Card>

      <Card title="üìù TodoList - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á">
        <TodoList />
      </Card>

      <Card title="üîç SearchBox - –ø–æ–∏—Å–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏">
        <SearchBox />
      </Card>
    </div>
  );

  const renderLifecycleComponents = () => (
    <div className="test-section">
      <h2>‚è±Ô∏è –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h2>
      
      <Card title="‚è∞ Timer - —Å–µ–∫—É–Ω–¥–æ–º–µ—Ä">
        <Timer />
        <p style={{marginTop: '15px', color: '#666', fontSize: '0.9em'}}>
          üí° –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        </p>
      </Card>

      <Card title="üìè WindowSizeTracker - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞">
        <WindowSizeTracker />
        <p style={{marginTop: '15px', color: '#666', fontSize: '0.9em'}}>
          üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        </p>
      </Card>

      <Card title="üåê DataFetcher - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API">
        <DataFetcher 
          userId={dataFetcherUserId}
          onUserIdChange={setDataFetcherUserId}
        />
        <p style={{marginTop: '15px', color: '#666', fontSize: '0.9em'}}>
          üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JSONPlaceholder API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        </p>
      </Card>
    </div>
  );

  const renderHooksComponents = () => (
    <ThemeProvider>
      <div className="test-section">
        <h2>‚öõÔ∏è –•—É–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
        
        <Card title="üéØ CounterWithHooks - —Å—á—ë—Ç—á–∏–∫ –Ω–∞ —Ö—É–∫–∞—Ö">
          <CounterWithHooks />
        </Card>

        <Card title="üë®‚Äçüíº UserProfile - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è">
          <UserProfile />
        </Card>

        <Card title="üîÑ EffectDemo - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è useEffect">
          <EffectDemo />
        </Card>

        <Card title="üåì ThemeToggle - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã">
          <ThemeToggle />
        </Card>

        <Card title="üì° FetchDemo - –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ useFetch">
          <FetchDemo />
        </Card>
      </div>
    </ThemeProvider>
  );

  return (
    <div className="component-tests">
      <div className="test-summary shadow-effect">
        <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
        <ul>
          <li>üß© –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: <strong>6</strong></li>
          <li>üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º: <strong>5</strong></li>
          <li>‚è±Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º: <strong>3</strong></li>
          <li>‚öõÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö—É–∫–∞–º–∏: <strong>5 + 2 –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö—É–∫–∞</strong></li>
          <li>üéâ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: <strong>19</strong></li>
        </ul>
      </div>
      
      <nav className="test-nav">
        <button 
          className={`nav-btn ${activeSection === 'basic' ? 'active' : ''}`}
          onClick={() => setActiveSection('basic')}
        >
          üß© –ë–∞–∑–æ–≤—ã–µ
        </button>
        <button 
          className={`nav-btn ${activeSection === 'stateful' ? 'active' : ''}`}
          onClick={() => setActiveSection('stateful')}
        >
          üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ
        </button>
        <button 
          className={`nav-btn ${activeSection === 'lifecycle' ? 'active' : ''}`}
          onClick={() => setActiveSection('lifecycle')}
        >
          ‚è±Ô∏è –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
        </button>
        <button 
          className={`nav-btn ${activeSection === 'hooks' ? 'active' : ''}`}
          onClick={() => setActiveSection('hooks')}
        >
          ‚öõÔ∏è –•—É–∫–∏
        </button>
      </nav>

      <div className="test-content">
        {activeSection === 'basic' && renderBasicComponents()}
        {activeSection === 'stateful' && renderStatefulComponents()}
        {activeSection === 'lifecycle' && renderLifecycleComponents()}
        {activeSection === 'hooks' && renderHooksComponents()}
      </div>
    </div>
  );
};

export default ComponentTests;