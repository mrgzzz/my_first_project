1. Promise.then().catch() использует цепочки колбэков, а async/await с try/catch позволяет писать асинхронный код в синхронном стиле, что улучшает читаемость.

2. Promise.all ожидает выполнения всех промисов и завершается ошибкой, если хотя бы один промис отклонён.

3. Promise.all ждёт все промисы, Promise.race возвращает первый завершённый, а Promise.allSettled ждёт все независимо от их статуса.

4. Повторные попытки реализуются через рекурсивные вызовы с увеличением задержки между попытками по экспоненте.

5. "Состояние гонки" возникает когда результат зависит от порядка выполнения операций, и избегается через правильную синхронизацию.

6. Кэширование сохраняет результаты запросов для повторного использования, уменьшая нагрузку на сервер.

7. Оптимизация включает параллельное выполнение, кэширование и отмену неактуальных запросов.

8. Ошибки в цепочках обрабатываются через .catch() в конце цепочки или try/catch в async функциях.

9. Async/await упрощает чтение и отладку кода по сравнению с цепочками промисов.

10. Отладка асинхронного кода ведётся через console.log, точки останова и инструменты разработчика браузера.