1. event.preventDefault() отменяет стандартное поведение элемента, а event.stopPropagation() останавливает всплытие события.

2. Делегирование событий позволяет обрабатывать события на родительском элементе для дочерних элементов, что эффективно для динамического контента.

3. Событие проходит три фазы: capturing (погружение), target (целевая) и bubbling (всплытие), обработчики выполняются в соответствии с фазой.

4. event.target указывает на элемент, который инициировал событие, а event.currentTarget на элемент, на котором висит обработчик.

5. Кастомное событие создается через new CustomEvent() и запускается dispatchEvent(), данные передаются в detail.

6. Debounce откладывает выполнение функции, throttle ограничивает частоту вызовов, используются для оптимизации обработки input и scroll.

7. Обработчики удаляются через removeEventListener(), это важно для предотвращения утечек памяти.

8. Ошибки загрузки обрабатываются через события error и loadend, показывая статус загрузки ресурсов.

9. addEventListener позволяет добавлять несколько обработчиков и контролировать фазу, а onclick перезаписывает предыдущие обработчики.

10. Производительность оптимизируется через делегирование событий, debounce/throttle и удаление ненужных обработчиков.